services:
   
    mongo:
        build:
            context: ../
            dockerfile: Dockerfile.mongo
        env_file:
            - ../.env.mongo
        command:
            - 'mongod'
            - '--replSet'
            - 'rs0'
            - '--bind_ip_all'
            - '--port'
            - '27017'
            - '--keyFile'
            - '/data/mongo-keyfile'
            - '--auth'
        container_name: mongo
        ports:
            - 27017:27017
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        restart: always
        healthcheck:
            test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
            interval: 5s
            timeout: 30s
            retries: 30
        volumes:
            - ../addons/seed-db.js:/docker-entrypoint-initdb.d/02-seed-db.js:ro
            - /var/lib/docker/volumes/git-container_dbdata/_data:/data/db
            - /var/lib/docker/volumes/git-container_dbdata_config/_data:/data/configdb
        environment:
            - TZ=Asia/Karachi
            - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
        networks:
            - app-network

    ##############
    ### Redis ###
    ###########
    redis:
        image: redis:alpine
        container_name: redis
        healthcheck:
            test: ['CMD', 'redis-cli', 'ping']
            interval: 5s
            timeout: 30s
            retries: 30
        networks:
            - app-network

networks:
    app-network:
        driver: bridge

volumes:
    dbdata:
    uploads_volume:
    dbdata_config:
